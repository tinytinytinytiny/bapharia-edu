---
import ArticleTOCLayout from "@layouts/ArticleTOCLayout.astro";
import PageTitle from "@components/PageTitle/PageTitle.astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import {
	useStoryblokApi,
	renderRichText,
	storyblokEditable,
} from "@storyblok/astro";
import { useTranslations } from "src/utils/i18n";
import HeadingNav from "@components/HeadingNav/HeadingNav.astro";
import Details from "@components/Details/Details.astro";

export async function getStaticPaths() {
	const storyblokApi = useStoryblokApi();
	const { data } = await storyblokApi.get('cdn/stories/', {
		starts_with: 'classes/',
		content_type: 'class',
		version: import.meta.env.DEV ? "draft" : "published",
	});
	const stories = Object.values(data.stories);
	return stories.map((story) => {
		return {
			params: { slug: story.slug }
		};
	});
}

const storyblokApi = useStoryblokApi();
const slug = Astro.params.slug;
const t = await useTranslations("en");

const { data } = await storyblokApi.get(`cdn/stories/classes/${slug}`, {
	version: import.meta.env.DEV ? "draft" : "published",
});
const name = data.story.content.ui_string;
const content = data.story.content;
---

<ArticleTOCLayout
	title={t(`class.${name}`)}
	storyblokAttributes={storyblokEditable(content)}
>
	<PageTitle title={t(`class.${name}`)} align="start" slot="title">
		<Fragment set:html={renderRichText(content.description)} />
	</PageTitle>
	<HeadingNav title={t(`class.${name}`)} slot="toc">
		<ul>
			<li>
				<a href="#overview">Overview</a>
			</li>
			<li>
				<a href="#skills">Skills</a>
			</li>
			<li>
				<ul>
					<li>
						<a href="#base-actions">Base Actions</a>
					</li>
					<li>
						<a href="#tactical-skills">Tactical Skills</a>
					</li>
					<li>
						<a href="#ultimate-skills">Ultimate Skills</a>
					</li>
					<li>
						<a href="#base-abilities">Base Abilities</a>
					</li>
					<li>
						<a href="#class-abilities">Class Abilities</a>
					</li>
				</ul>
			</li>
		</ul>
	</HeadingNav>
	<div class="stack">
		<div class="content stack">
			<h2 id="overview">Overview</h2>
			<Fragment set:html={renderRichText(content.overview)} />
		</div>
		<div class="content stack">
			<h2 id="skills">Skills</h2>
			{
				content.base_actions?.length > 0 && (
						<h3
							class="skill-category-name"
							id="base-actions"
						>
							Base Actions
						</h3>
						<div class="stack stack-space-xs">
							{content.base_actions.map(
								(skill, index) => (
									<StoryblokComponent
										blok={skill}
										properties={index < 2}
									/>
								),
							)}
						</div>
				)
			}
			{
				content.tactical_skills?.length > 0 && (
						<h3
							class="skill-category-name"
							id="tactical-skills"
						>
							Tactical Skills
						</h3>
						<div class="stack stack-space-xs">
							{content.tactical_skills.map((skill) => (
								<StoryblokComponent blok={skill} />
							))}
						</div>
				)
			}
			{
				content.ultimate_skills?.length > 0 && (
						<h3
							class="skill-category-name"
							id="ultimate-skills"
						>
							Ultimate Skills
						</h3>
						<div class="stack stack-space-xs">
							{content.ultimate_skills.map((skill) => (
								<StoryblokComponent blok={skill} />
							))}
						</div>
				)
			}
			{
				content.base_abilities?.length > 0 && (
						<h3
							class="skill-category-name"
							id="base-abilities"
						>
							Base Abilities
						</h3>
						<div class="stack stack-space-xs">
							{content.base_abilities.map((skill) => (
								<StoryblokComponent
									blok={skill}
									properties={false}
								/>
							))}
						</div>
				)
			}
			{
				content.class_abilities?.length > 0 && (
						<h3
							class="skill-category-name"
							id="class-abilities"
						>
							Class Abilities
						</h3>
						<div class="stack stack-space-xs">
							{content.class_abilities.map((skill) => (
								<StoryblokComponent
									blok={skill}
									properties={false}
								/>
							))}
						</div>
				)
			}
		</div>
	</div>
</ArticleTOCLayout>

<style>
	.stack > .content + .content {
		--stack-space-override: calc(var(--text-5) * 1.125);
	}

	@container body (min-inline-size: 30rem) {
		.stack > .content + .content {
			--stack-space-override: var(--space-xs);
		}
	}
</style>