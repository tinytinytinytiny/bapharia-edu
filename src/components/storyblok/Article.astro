---
import {
	RichTextSchema,
	renderRichText,
	storyblokEditable,
} from "@storyblok/astro";
import cloneDeep from "clone-deep";
import articleResolver from "./article-resolver";
import { slugify } from "@utils";
import ArticleTOCLayout from "@layouts/ArticleTOCLayout.astro";
import ArticleTitle from "@components/PageTitle/ArticleTitle.astro";
import ArticleNav from "@components/Article/ArticleNav.astro";
import StoryblokImg from "@components/Image/StoryblokImg.astro";
import style from "lite-youtube-embed";

const { lastUpdatedDate, blok } = Astro.props;

const _headingIds = [];
const _content = blok.content.content.map((x) => {
	if (x.type === "heading") {
		let id;
		const headingText = x.content.find((y) => "text" in y);
		const _id = slugify(headingText.text);
		const repeatId = [..._headingIds].reverse().find((x) => x.id === _id);
		if (repeatId) {
			_headingIds.push({ id: _id, instance: repeatId.instance + 1 });
			id = `${repeatId.id}-${repeatId.instance + 1}`;
		} else {
			_headingIds.push({ id: _id, instance: 1 });
			id = _id;
		}
		x.content[0].marks = [
			{
				type: "anchor",
				attrs: { id },
			},
		];
	}

	return x;
});
const content = renderRichText(
	{ type: "doc", content: _content },
	{
		schema: cloneDeep(RichTextSchema),
		resolver: articleResolver,
	},
);
const headings = blok.content.content.filter((x) => x.type === "heading");
---

<ArticleTOCLayout
	title={blok.title}
	storyblokAttributes={storyblokEditable(blok)}
>
	<ArticleTitle
		title={blok.title}
		author={blok.author}
		lastUpdatedDate={lastUpdatedDate}
		slot="title"
	>
		<StoryblokImg
			slot="img"
			src={blok.cover_image.filename}
			alt={blok.cover_image.alt}
			sizes="95vw"
		/>
	</ArticleTitle>
	<ArticleNav title={blok.title} headings={headings} slot="toc" />
	<div class="content">
		<div class="article content-wrapper stack">
			<Fragment set:html={content} />
		</div>
	</div>
</ArticleTOCLayout>

<script>
	import "@justinribeiro/lite-youtube";
</script>
