---
import NavItem from "./NavItem.astro";
import NavItemToggle from "./NavItemToggle.svelte";
import SubmenuCollapseButton from "./SubmenuCollapseButton.svelte";

const { url = "/", title, icon, current = false, id } = Astro.props;
const _icon = await icon;
---

<li class="nav-item">
	{
		current ? (
			<NavItemToggle
				client:load
				url={url}
				title={title}
				icon={_icon.default}
				current={current}
				controls={id}
			>
				<div id={id} class="nav-submenu">
					<slot />
					<SubmenuCollapseButton client:visible controls={id} />
				</div>
			</NavItemToggle>
		) : (
			<NavItem
				url={url}
				title={title}
				icon={icon}
				current={current}
			/>
		)
	}
</li>

<script>
	import screens from "@data/design-tokens/screen-sizes.json";

	document.documentElement.addEventListener("submenutoggle", (event) => {
		if (event.detail.open) {
			document.documentElement.classList.add("submenu-expanded");
		} else {
			document.documentElement.classList.remove("submenu-expanded");
			if (
				event.detail.id &&
				event.target.tagName.toLowerCase() === "button"
			) {
				document
					.querySelector(`[aria-controls="${event.detail.id}"]`)
					.focus();
			}
		}
	});

	document.body.addEventListener("click", (event) => {
		const maxBreakPoint = `${
			Number(screens["2xl"].split("rem")[0]) - 0.01
		}rem`;
		const minBreakPoint = window.matchMedia(
			`(min-width: ${screens.md}) and (max-width: ${maxBreakPoint})`
		);

		if (!event.target.closest(".nav-menu") && minBreakPoint.matches) {
			const closeEvent = new CustomEvent("submenutoggle", {
				detail: { open: false },
			});
			document.documentElement.dispatchEvent(closeEvent);
		}
	});
</script>
