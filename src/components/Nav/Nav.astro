---
import navigationData from "@data/navigation";
import NavItem from "./NavItem.astro";
import NavItemDisclosure from "./NavItemDisclosure.astro";
import Svg from "@jasikpark/astro-svg-loader";
import { slugify } from "@utils";

function isCurrentUrl(url) {
	const rootPathName = "/" + Astro.url.pathname.split("/")[1];
	return url === rootPathName;
}
---

<nav class="primary-nav" aria-label="Main">
	<div class="primary-nav__inner">
		<button
			aria-controls="main-menu"
			aria-expanded="false"
			class="nav-toggle button icon-button shadow-md"
			type="button"
		>
			<div class="button__icon">
				<Svg
					src={import("@assets/icons/three-line-horizontal.svg?raw")}
				/>
			</div>
			Menu
		</button>
		<ul id="main-menu" role="list" class="nav-menu">
			{
				navigationData.map((item) =>
					"children" in item ? (
						<NavItemDisclosure
							title={item.title}
							url={item.url}
							controls={`nav-${slugify(item.title)}-submenu`}
							current={isCurrentUrl(item.url)}
						>
							<Svg slot="icon" src={item.icon} />
							<ul
								id={`nav-${slugify(item.title)}-submenu`}
								class="nav-submenu"
								role="list"
							>
								{item.children.map((child) => (
									<li class="nav-submenu-item">
										<a
											href={child.url}
											class="nav-submenu-item__link underline-on-hover"
											aria-current={
												child.current ? "page" : "false"
											}
										>
											{child.title}
										</a>
									</li>
								))}
							</ul>
						</NavItemDisclosure>
					) : (
						<NavItem
							title={item.title}
							url={item.url}
							current={isCurrentUrl(item.url)}
						>
							<Svg slot="icon" src={item.icon} />
						</NavItem>
					)
				)
			}
		</ul>
	</div>
</nav>

<style>
	.primary-nav {
		inset-inline: 0;
		position: fixed;
		top: 0;
		z-index: 10;
	}

	.primary-nav.open {
		background-color: var(--color-surface-2);
		height: 100vh;
		height: 100lvh;
		inset-inline: 0;
	}

	.primary-nav__inner {
		padding-block: var(--space-s);
	}

	.open > .primary-nav__inner {
		height: 100%;
		height: 100dvh;
		overflow-y: auto;
		overscroll-behavior: none;
	}

	.nav-toggle {
		margin-inline: var(--space-s);
	}

	.primary-nav.open .nav-toggle {
		position: sticky;
		top: 0;
	}

	.nav-menu {
		--border-radius: 9999px;
		display: none;
		font-size: var(--text-1);
		margin-block-start: var(--space-m);
		padding-inline: var(--space-2xs);
		padding-bottom: calc(var(--space-s) + env(safe-area-inset-bottom));
	}

	[aria-expanded="true"] + .nav-menu {
		display: block;
	}

	@screen md {
		.primary-nav,
		.primary-nav.open {
			height: 100vh;
			height: 100lvh;
			inset-inline-end: auto;
			top: 0;
		}

		.primary-nav.open {
			background-color: transparent;
		}

		.primary-nav__inner,
		.open > .primary-nav__inner {
			height: 100%;
			height: 100dvh;
			padding: 0;
		}

		.open > .primary-nav__inner {
			overflow: initial;
		}

		.nav-toggle {
			display: none;
		}

		.nav-menu {
			display: block;
			font-size: var(--text-0);
			height: 100%;
			inline-size: var(--sidebar-width);
			margin-block-start: 0;
			overflow-y: auto;
			padding-block: var(--space-2xs);
			padding-bottom: calc(
				var(--space-2xs) + env(safe-area-inset-bottom)
			);
		}
	}
</style>

<script>
	const nav = document.querySelector(".primary-nav");
	const navToggle = document.querySelector(".nav-toggle");
	let expanded = JSON.parse(navToggle.getAttribute("aria-expanded"));

	navToggle.addEventListener("click", () => {
		expanded = !expanded;
		if (expanded) {
			document.documentElement.classList.add("fixed-overlay-visible");
			nav.classList.add("open");
		} else {
			document.documentElement.classList.remove("fixed-overlay-visible");
			nav.classList.remove("open");
		}
		navToggle.setAttribute("aria-expanded", expanded);
	});
</script>
