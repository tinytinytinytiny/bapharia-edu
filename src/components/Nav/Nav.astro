---
import navigationData from "@data/navigation";
import NavItem from "./NavItem.astro";
import NavSubmenuController from "./NavSubmenuController.svelte";
import NavSubmenu from "./NavSubmenu.astro";
import AsyncSubmenu from "./AsyncSubmenu.astro";
import ThemeToggle from "./ThemeToggle.astro";
import Svg from "@jasikpark/astro-svg-loader";
import { slugify } from "@utils";
import { useTranslations } from "src/utils/i18n";

const t = await useTranslations("en");

function isCurrentPath(url) {
	const rootPathName = "/" + Astro.url.pathname.split("/")[1];
	return url === rootPathName;
}

function isCurrentUrl(url) {
	if (Astro.url.pathname.endsWith("/")) {
		if (!url.endsWith("/")) {
			return url + "/" === Astro.url.pathname;
		}
	}

	return url === Astro.url.pathname;
}
---

<nav class="primary-nav" aria-label="Main">
	<div class="primary-nav__inner">
		<button
			aria-controls="main-menu"
			aria-expanded="false"
			class="nav-toggle button icon-button shadow-md"
			type="button"
		>
			<div class="icon">
				<Svg
					src={import("@assets/icons/three-line-horizontal.svg?raw")}
				/>
			</div>
			Menu
		</button>
		<div id="main-menu" class="nav-menu">
			<ul class="nav-menu-list stack is-full list-none">
				{
					navigationData.map(async (item) => (
						<li class="nav-item">
							{"children" in item && isCurrentPath(item.url) ? (
								<NavSubmenuController
									client:load
									title={t(item.title)}
									url={item.url}
									icon={(await item.icon).default}
									id={`nav-${slugify(t(item.title))}-submenu`}
									current={isCurrentPath(item.url)}
								>
									{Array.isArray(item.children) ? (
										<NavSubmenu
											parentUrl={item.url}
											parentTitle={t(item.title)}
											children={item.children}
										/>
									) : (
										<AsyncSubmenu
											parentUrl={item.url}
											parentTitle={t(item.title)}
											linkPrefix={item.children}
										/>
									)}
								</NavSubmenuController>
							) : (
								<NavItem
									title={t(item.title)}
									url={item.url}
									icon={item.icon}
									current={isCurrentUrl(item.url)}
								/>
							)}
						</li>
					))
				}
			</ul>
			<ThemeToggle />
		</div>
	</div>
</nav>

<style>
	.primary-nav {
		inset-inline: 0;
		position: fixed;
		top: 0;
		z-index: 10;
	}

	.primary-nav.open {
		background-color: var(--color-surface-1);
		height: 100vh;
		height: 100lvh;
		inset-inline: 0;
	}

	.primary-nav__inner {
		padding-block: var(--space-s);
	}

	.open > .primary-nav__inner {
		height: 100%;
		height: 100dvh;
		overflow-y: auto;
		overscroll-behavior: contain;
	}

	.nav-toggle {
		margin-inline: var(--main-region-padding);
	}

	.primary-nav.open .nav-toggle {
		inset-block-start: 0;
		position: sticky;
	}

	.nav-menu {
		display: none;
		flex-flow: column nowrap;
		font-size: var(--text-1);
		margin-block-start: var(--space-s);
		padding-inline: var(--main-region-padding);
		padding-bottom: env(safe-area-inset-bottom);
	}

	[aria-expanded="true"] + .nav-menu {
		display: flex;
	}

	.nav-menu-list {
		--stack-space: 2px;
	}

	@screen md {
		.primary-nav,
		.primary-nav.open {
			height: 100vh;
			height: 100lvh;
			inset-block-start: 0;
			inset-inline-end: auto;
		}

		.primary-nav.open {
			background-color: transparent;
		}

		.primary-nav__inner,
		.open > .primary-nav__inner {
			block-size: 100%;
			block-size: 100dvh;
			padding: 0;
		}

		.open > .primary-nav__inner {
			overflow: initial;
		}

		.nav-toggle {
			display: none;
		}

		.nav-menu {
			align-items: center;
			block-size: 100%;
			display: flex;
			font-size: var(--text-0);
			inline-size: var(--sidebar-width);
			margin-block-start: 0;
			overflow-y: auto;
			padding-block: calc(
					var(--main-region-padding) - var(--default-gutter) / 2
				)
				var(--main-region-padding);
			padding-inline: calc(var(--main-region-padding) / 2);
		}

		.nav-menu-list {
			--stack-space: 0;
		}

		/* @supports selector(:has(*)) {
			@screen md {
				.nav-menu {
					border-inline-end: 1px solid transparent;
				}

				.nav-menu:has(.nav-item__link.expanded.interacted) {
					border-color: var(--color-surface-2);
				}
			}

			@screen 2xl {
				.nav-menu:has(.nav-item__link.expanded) {
					border-color: var(--color-surface-2);
				}
			}
		} */
	}
</style>

<script>
	// primary navigation (mobile hamburger menu)
	const nav = document.querySelector(".primary-nav");
	const navToggle = document.querySelector(".nav-toggle");
	let expanded = JSON.parse(navToggle.getAttribute("aria-expanded"));

	navToggle.addEventListener("click", () => {
		expanded = !expanded;
		if (expanded) {
			document.documentElement.classList.add("fixed-overlay-visible");
			nav.classList.add("open");
		} else {
			document.documentElement.classList.remove("fixed-overlay-visible");
			nav.classList.remove("open");
		}
		navToggle.setAttribute("aria-expanded", expanded);
	});

	// submenu navigation
	import { submenu } from "./navStore.js";
	import screens from "@data/design-tokens/screen-sizes.json";

	submenu.listen((submenu) => {
		if (submenu.open) {
			document.documentElement.classList.add("submenu-expanded");
		} else {
			document.documentElement.classList.remove("submenu-expanded");
			if (submenu.id) {
				document
					.querySelector(`[aria-controls="${submenu.id}"]`)
					.focus();
			}
		}
	});

	document.body.addEventListener("click", (event) => {
		const maxBreakPoint = `${
			Number(screens["2xl"].split("rem")[0]) - 0.01
		}rem`;
		const minBreakPoint = window.matchMedia(
			`(min-width: ${screens.md}) and (max-width: ${maxBreakPoint})`,
		);

		if (!event.target.closest(".nav-menu") && minBreakPoint.matches) {
			submenu.set({ open: false });
		}
	});

	document.addEventListener("keydown", (event) => {
		const maxBreakPoint = `${
			Number(screens["2xl"].split("rem")[0]) - 0.01
		}rem`;
		const minBreakPoint = window.matchMedia(
			`(min-width: ${screens.md}) and (max-width: ${maxBreakPoint})`,
		);

		if (event.key === "Escape" && minBreakPoint.matches) {
			submenu.set({ open: false });
		}
	});
</script>
