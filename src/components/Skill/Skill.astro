---
import { useTranslations } from "src/utils/i18n";
import DetailsSummaryIcon from "@components/Details/DetailsSummaryIcon.astro";

const t = await useTranslations("en");

const { name, characterClass, level } = Astro.props;
---

<details>
	<summary class="button">
		<span class="skill-title cluster">
			<span class="leading-tight">
				<span class="skill-title__name">
					{name}
				</span>
				<span class="visually-hidden">;&nbsp;</span>
				<span class="skill-title__sub">
					Lv. {level}&#32;
					{t(`class.${characterClass}`)} required
				</span>
			</span>
			<slot name="icon" />
		</span>
		<DetailsSummaryIcon />
	</summary>
	<div class="skill-content sidebar">
		<div class="skill-properties-container">
			<slot name="properties" />
		</div>
		<slot name="description" />
	</div>
</details>

<style>
	details {
		background-color: var(--color-surface-1);
		border-radius: var(--border-radius);
		position: relative;
	}

	details::before,
	details::after {
		border-radius: inherit;
		content: "";
		display: block;
		position: absolute;
	}

	details::before {
		background-color: var(--color-separator);
		border-top-left-radius: 0;
		border-top-right-radius: 0;
		inset-block: 100% calc(-1 * var(--space-3xs));
		inset-inline: var(--border-radius);
		opacity: 0.2;
	}

	details::after {
		border: 2px solid var(--color-separator);
		inset: 0;
		pointer-events: none;
	}

	details[open]::before {
		opacity: 0;
	}

	@media (prefers-reduced-motion: no-preference) {
		@supports (interpolate-size: allow-keywords) and
			selector(details::details-content) {
			details::before,
			details::after {
				transition: opacity 0.2s ease-out;
			}

			details[open]::after {
				transition:
					border-color 0.2s ease-out,
					opacity 0.2s ease-out;
			}
		}
	}

	@media (hover: hover) {
		details:not([open]):has(summary:hover)::after {
			border-color: var(--color-separator-strong);
		}
	}

	details:not([open]):has(summary:active) {
		transform: translateY(calc(var(--space-3xs) / 2));
	}

	summary,
	details[open] summary {
		--button-background: transparent;
		--button-hover-background: var(--color-surface-2);
		--button-active-background: var(--color-surface-3);
		--button-color: var(--color-text-regular);
		--button-padding-block: calc(var(--space-xs) - 2px);
		--button-padding-inline: calc(var(--space-s) - 2px);
	}

	.skill-title {
		gap: var(--space-xs-s);
	}

	.skill-title__name {
		color: var(--color-text-strong);
		display: block;
		font-weight: 800;
	}

	.skill-title__sub {
		display: block;
		font-size: var(--text--1);
	}

	.skill-content {
		--sidebar-target-width: 12rem;
		--sidebar-content-min-width: 41.5ch;
		align-items: stretch;
		flex-direction: row-reverse;
		gap: var(--space-m);
		padding: var(--space-s);
		padding-block-start: var(--space-2xs);
	}

	.skill-properties-container {
		background-color: var(--color-surface-2);
		border-radius: var(--border-radius-s);
	}

	.skill-properties-container:empty {
		display: none;
	}

	@screen sm {
		.skill-title__name {
			font-size: var(--text-1);
		}

		.skill-title__sub {
			font-size: 1rem;
		}
	}
</style>
